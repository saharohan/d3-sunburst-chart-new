{"ast":null,"code":"(function (f) {\n  if (typeof exports === \"object\" && typeof module !== \"undefined\") {\n    module.exports = f();\n  } else if (typeof define === \"function\" && define.amd) {\n    define([], f);\n  } else {\n    var g;\n\n    if (typeof window !== \"undefined\") {\n      g = window;\n    } else if (typeof global !== \"undefined\") {\n      g = global;\n    } else if (typeof self !== \"undefined\") {\n      g = self;\n    } else {\n      g = this;\n    }\n\n    g.sunburst = f();\n  }\n})(function () {\n  var define, module, exports;\n  return function () {\n    function r(e, n, t) {\n      function o(i, f) {\n        if (!n[i]) {\n          if (!e[i]) {\n            var c = \"function\" == typeof require && require;\n            if (!f && c) return c(i, !0);\n            if (u) return u(i, !0);\n            var a = new Error(\"Cannot find module '\" + i + \"'\");\n            throw a.code = \"MODULE_NOT_FOUND\", a;\n          }\n\n          var p = n[i] = {\n            exports: {}\n          };\n          e[i][0].call(p.exports, function (r) {\n            var n = e[i][1][r];\n            return o(n || r);\n          }, p, p.exports, r, e, n, t);\n        }\n\n        return n[i].exports;\n      }\n\n      for (var u = \"function\" == typeof require && require, i = 0; i < t.length; i++) {\n        o(t[i]);\n      }\n\n      return o;\n    }\n\n    return r;\n  }()({\n    1: [function (require, module, exports) {\n      'use strict';\n\n      Object.defineProperty(exports, \"__esModule\", {\n        value: true\n      });\n\n      var _createClass = function () {\n        function defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        return function (Constructor, protoProps, staticProps) {\n          if (protoProps) defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) defineProperties(Constructor, staticProps);\n          return Constructor;\n        };\n      }();\n\n      var _react = require('react');\n\n      var _react2 = _interopRequireDefault(_react);\n\n      var _propTypes = require('prop-types');\n\n      var _propTypes2 = _interopRequireDefault(_propTypes);\n\n      var _shallowequal = require('shallowequal');\n\n      var _shallowequal2 = _interopRequireDefault(_shallowequal);\n\n      var _d3Color = require('d3-color');\n\n      var _d3Selection = require('d3-selection');\n\n      var _d3Scale = require('d3-scale');\n\n      var _d3Hierarchy = require('d3-hierarchy');\n\n      var _d3Shape = require('d3-shape');\n\n      var _d3Path = require('d3-path');\n\n      var _d3Interpolate = require('d3-interpolate');\n\n      var _d3Transition = require('d3-transition');\n\n      function _interopRequireDefault(obj) {\n        return obj && obj.__esModule ? obj : {\n          default: obj\n        };\n      }\n\n      function _classCallCheck(instance, Constructor) {\n        if (!(instance instanceof Constructor)) {\n          throw new TypeError(\"Cannot call a class as a function\");\n        }\n      }\n\n      function _possibleConstructorReturn(self, call) {\n        if (!self) {\n          throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        }\n\n        return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n      }\n\n      function _inherits(subClass, superClass) {\n        if (typeof superClass !== \"function\" && superClass !== null) {\n          throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n        }\n\n        subClass.prototype = Object.create(superClass && superClass.prototype, {\n          constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true\n          }\n        });\n        if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n      } // We have to import this event though we dont use it\n\n\n      _d3Transition.transition;\n      /* REFS\n       * zoomable /w/ labels -- https://bl.ocks.org/vasturiano/12da9071095fbd4df434e60d52d2d58d\n       * text opacity -- https://gist.github.com/metmajer/5480307\n      */\n\n      /**\n      * Creates a zoomable Sunburst\n      * @param {object} props\n      * @param {object} props.data - see the d3 {@link https://github.com/defunctzombie/d3-examples/blob/master/dendrogram/flare.json|flare.json}\n          data for the shape that is required. \n      * @param {string} props.width - width of svg\n      * @param {string} props.height - height of svg. \n      *   If width and height are not the same there will be dead space.\n      * @param {number} props.count_member - what data element to use for slice size\n      * @param {number} [props.radianCutoff=.01] - smallest slice to show in radians\n      * @param {number} [props.transitionDuration=500] - ms for animation\n      * @param {number} [props.saturation=.5] - base color saturation of slices\n      * @param {number} [props.lightness=.5] - base color lightness of slices\n      * @param {number} [props.child_brightness=.5] - value to lighten children slices\n      * @param {number} [props.font_size=12] - for calculating if text fits\n      * @param {func} [props.colorFunc=(node, current_color) => current_color]\n              - Custom color func for slices with heights > 0.\n      * @param {func} [props.labelFunc] - returns text to slice\n      * @param {func} [props.condensedLabelFunc] - backup function to try to fit less text\n              for smaller slices.\n      * @param {func} [props.tooltipFunc=(data) => data.name]\n      * @param {number} [props.tooltipX=20] - x pointer offset to show tooltip \n      * @param {number} [props.tooltipY=20] - y pionter offset to show tooltip\n      * @param {string} [props.domID] - will be random if undefined\n      * @param {func} [props.onMouseover]\n      * @param {func} [props.onMouseout]\n      * @param {func} [props.onClick]\n      * @param {string} [props.key_member] - data member to construct dom ids from\n      \n      */\n      //FIXME normalize function signatures\n      //FIXME normalize case\n\n      var Sunburst = function (_React$Component) {\n        _inherits(Sunburst, _React$Component);\n\n        function Sunburst(props) {\n          _classCallCheck(this, Sunburst);\n\n          var _this = _possibleConstructorReturn(this, (Sunburst.__proto__ || Object.getPrototypeOf(Sunburst)).call(this, props));\n\n          _this._last_click = null;\n          _this.radius = Math.min(_this.props.width, _this.props.height) / 2;\n          _this.y = (0, _d3Scale.scaleSqrt)().range([0, _this.radius]);\n          _this.x = (0, _d3Scale.scaleLinear)().range([0, 2 * Math.PI]);\n          _this.arc = (0, _d3Shape.arc)().startAngle(function (d) {\n            return Math.max(0, Math.min(2 * Math.PI, _this.x(d.x0)));\n          }).endAngle(function (d) {\n            return Math.max(0, Math.min(2 * Math.PI, _this.x(d.x1)));\n          }).innerRadius(function (d) {\n            return Math.max(0, _this.y(d.y0));\n          }).outerRadius(function (d) {\n            return Math.max(0, _this.y(d.y1));\n          });\n          _this.partition = (0, _d3Hierarchy.partition)();\n          _this.hueDXScale = (0, _d3Scale.scaleLinear)().domain([0, 1]).range([0, 360]);\n          _this.domId = _this.props.domId || 'sunburst-wrapper-' + Math.round(Math.random() * 1e12).toString();\n          _this.svg = null;\n          _this.tooltipDom = null;\n          _this.lastSelect = null;\n          return _this;\n        }\n\n        _createClass(Sunburst, [{\n          key: 'componentDidMount',\n          value: function componentDidMount() {\n            this.props._debug && this.props._log(\"Sunburst: componentDidMount()\");\n\n            this._create();\n          }\n        }, {\n          key: 'shouldComponentUpdate',\n          value: function shouldComponentUpdate(nextProps) {\n            this.props._debug && this.props._log(\"Sunburst: shouldComponentUpdate()\", this.props);\n\n            if (!(0, _shallowequal2.default)(this.props, nextProps)) {\n              return false;\n            }\n\n            return true;\n          }\n        }, {\n          key: '_destroy_svg',\n          value: function _destroy_svg() {\n            this.props._debug && this.props._log(\"Sunburst: _destroy_svg()\");\n            this.svg && this.svg.selectAll('*').remove();\n            this.svg = null;\n          }\n        }, {\n          key: 'componentDidUpdate',\n          value: function componentDidUpdate() {\n            //prevProps\n            this.props._debug && this.props._log(\"Sunburst: componentDidUpdate()\");\n\n            this._destroy_svg();\n\n            this._create();\n          }\n        }, {\n          key: 'componentWillUnmount',\n          value: function componentWillUnmount() {\n            this.props._debug && this.props._log(\"Sunburst: componentWillUnmount()\");\n\n            this._destroy_svg();\n          }\n          /**\n           * Programatically select a slice.\n           * @param id the slice key to select. This should be the key_member set in\n           * props.\n          */\n\n        }, {\n          key: 'select',\n          value: function select(id) {\n            this.props._debug && this.props._log(\"Sunburst: select(id)\");\n            var key = '#mainArc-' + id;\n            var nodes = (0, _d3Selection.select)(key).nodes();\n\n            if (!nodes.length) {\n              this.props._warn('could not find node with id of ' + key);\n\n              return;\n            }\n\n            var node = nodes[0].__data__;\n\n            this._update(node);\n          }\n        }, {\n          key: '_onClick',\n          value: function _onClick(node) {\n            this.props._debug && this.props._log(\"Sunburst: _onClick(node)\");\n            this._last_click = node;\n          }\n          /**\n           * recomputes slice colors. If the color function changes this should be called\n           * to update to the new color sheme.\n          */\n\n        }, {\n          key: 'updateColor',\n          value: function updateColor() {\n            var _this2 = this;\n\n            this.props._debug && this.props._log(\"Sunburst: updateColor()\");\n            this.svg.selectAll('path.sunburst-main-arc').style(\"fill\", function (d) {\n              return d.parent ? _this2._colorize(d) : \"white\";\n            });\n          }\n        }, {\n          key: '_create',\n          value: function _create() {\n            var _this3 = this;\n\n            this.props._debug && this.props._log(\"Sunburst: _create()\");\n            if (!this.props.data) return;\n            var root = (0, _d3Hierarchy.hierarchy)(this.props.data).sum(function (d) {\n              if (d[this.props.count_member] === undefined) this.props._warn('props.count_member (' + this.props.count_member + ') is not defined on data');\n              return !d.children || d.children.length === 0 ? d[this.props.count_member] : 0;\n            }.bind(this)); //.filter( (d) => d.depth < 4)\n\n            var data = this.partition(root).descendants().filter(function (d) {\n              return d.x1 - d.x0 > _this3.props.radianCutoff;\n            }); // 0.005 radians = 0.29 degrees\n\n            if (!this.svg) {\n              var w = this.props.width;\n              var h = this.props.height;\n              var el = (0, _d3Selection.select)('#' + this.domId);\n              this.svg = el.append('svg');\n              this.svg.style('class', 'sunburst-svg').style('width', w + 'px').style('height', h + 'px').attr('viewBox', -w / 2 + ' ' + -h / 2 + ' ' + w + ' ' + h); //this.canvas = this.svg.append('g');\n              //this.svg = d3Select(\"svg\").append(\"g\").attr(\"id\", \"bigG\")\n\n              var gSlices = this.svg.selectAll(\"g\").data(data).enter().append(\"g\");\n              gSlices.exit().remove();\n              var key = this.props.key_member;\n              gSlices.append(\"path\").attr('class', function (d) {\n                var cursor = !d.parent || !d.children ? ' cursor-pointer' : ' cursor-pointer';\n                var evenodd = d.depth % 2 ? 'even-row' : 'odd-row';\n                return 'sunburst-main-arc' + cursor + ' ' + evenodd;\n              }).attr('id', function (d, i) {\n                return key ? 'mainArc-' + d.data[key] : 'mainArc-' + i;\n              }).style(\"fill\", function (d) {\n                return d.parent ? _this3._colorize(d) : \"white\";\n              }).on('click', function (node) {\n                this._onClick(node);\n\n                this.props.onClick && this.props.onClick(node);\n\n                this._update(node);\n              }.bind(this));\n\n              if (this.props.labelFunc) {\n                gSlices.append('path').attr('class', 'sunburst-hidden-arc').attr('id', function (_, i) {\n                  return 'hiddenArc' + i;\n                }).attr('d', this._middleArcLine.bind(this)).style('fill', 'none');\n                var text = gSlices.append('text').style('pointer-events', 'none').style('dominant-baseline', 'middle').style('text-anchor', 'middle'); //.attr('display', d => this._textFits(d) ? null : 'none')\n\n                text.append('textPath').attr('startOffset', '50%').attr('xlink:href', function (_, i) {\n                  return '#hiddenArc' + i;\n                }).text(function (d) {\n                  return _this3._getLabelText(d) || '';\n                });\n              }\n            }\n\n            this.props.tooltip && this._setTooltips();\n\n            this._update(root);\n          }\n        }, {\n          key: '_update',\n          value: function _update(d, i, a) {\n            var _this4 = this;\n\n            this.props._debug && this.props._log(\"Sunburst: _update(d, i, a)\");\n            if (this.lastSelect && a && this.lastSelect == a[i].id) return;\n            this.lastSelect = a && a[i].id;\n            this.svg.transition().selectAll('textPath').attr(\"opacity\", 0);\n            var transition = this.svg.transition().duration(this.props.transitionDuration) // duration of transition\n            .tween(\"scale\", function () {\n              var xd = (0, _d3Interpolate.interpolate)(this.x.domain(), [d.x0, d.x1]),\n                  yd = (0, _d3Interpolate.interpolate)(this.y.domain(), [d.y0, 1]),\n                  yr = (0, _d3Interpolate.interpolate)(this.y.range(), [d.y0 ? 20 : 0, this.radius]);\n              return function (t) {\n                this.x.domain(xd(t));\n                this.y.domain(yd(t)).range(yr(t));\n              }.bind(this);\n            }.bind(this));\n            transition.selectAll('path.sunburst-hidden-arc').attrTween('d', function (d) {\n              return function () {\n                return _this4._middleArcLine(d);\n              };\n            }); //.style(\"fill\", (d) => d.parent ? this._colorize(d) : \"white\")\n\n            transition.selectAll('path.sunburst-main-arc').attrTween('d', function (d) {\n              return function () {\n                var arc = _this4.arc(d);\n\n                return arc;\n              };\n            }).on(\"end\", function (e, i, a) {\n              if (!_this4.arc.innerRadius()(e)) // if its not visible\n                return; // get a selection of the associated text element\n\n              var arcText = (0, _d3Selection.select)(a[i].parentNode).select(\"text textPath\"); // fade in the text element and recalculate positions\n\n              arcText.transition(_this4.props.transitionDuration / 2).attr(\"opacity\", 1).text(function (d) {\n                var text = _this4._getLabelText(d);\n\n                return text;\n              });\n            });\n          }\n        }, {\n          key: '_textFits',\n          value: function _textFits(d, label) {\n            this.props._debug && this.props._log(\"Sunburst: _textFits(d, label)\");\n            if (!label) return false; // changed to degress\n\n            var angle = (this.arc.endAngle()(d) - this.arc.startAngle()(d)) * 57.296;\n            var radius = this.arc.outerRadius()(d);\n            var arclength = 2 * Math.PI * radius * (angle / 360);\n            return label.length * this.props.font_size < arclength;\n          }\n        }, {\n          key: '_getLabelText',\n          value: function _getLabelText(d) {\n            this.props._debug && this.props._log(\"Sunburst: _getLabelText(d)\");\n            var label;\n            label = this.props.labelFunc && this.props.labelFunc(d);\n            if (this._textFits(d, label)) return label;\n            label = this.props.condensedLabelFunc && this.props.condensedLabelFunc(d);\n            if (this._textFits(d, label)) return label;\n            return null;\n          }\n        }, {\n          key: '_middleArcLine',\n          value: function _middleArcLine(d) {\n            this.props._debug && this.props._log(\"Sunburst: _middleArcLine(d)\");\n            var halfPi = Math.PI / 2;\n            var angles = [this.x(d.x0) - halfPi, this.x(d.x1) - halfPi];\n            var r = Math.max(0, (this.y(d.y0) + this.y(d.y1)) / 2);\n            var middleAngle = (angles[1] + angles[0]) / 2;\n            var invertDirection = middleAngle > 0 && middleAngle < Math.PI; // On lower quadrants write text ccw\n\n            if (invertDirection) {\n              angles.reverse();\n            }\n\n            var path = (0, _d3Path.path)();\n            path.arc(0, 0, r, angles[0], angles[1], invertDirection);\n            return path.toString();\n          }\n        }, {\n          key: '_inDomain',\n          value: function _inDomain(d) {\n            this.props._debug && this.props._log(\"Sunburst: _inDomain(d)\");\n            var d0 = this.x.domain()[0];\n            var d1 = this.x.domain()[1];\n            if (d.x0 < d0) return false;\n            if (d.x1 > d1) return false;\n            return true;\n          }\n        }, {\n          key: '_setTooltips',\n          value: function _setTooltips() {\n            this.props._debug && this.props._.log(\"Sunburst: _setTooltips(d)\");\n            this.tooltipDom = (0, _d3Selection.select)('#' + this.domId).append('div').attr('class', 'sunburst-tooltip').style('position', 'absolute').style('z-index', '10').style('opacity', '0').style('text-align', 'center').style('border-radius', '8px') //.style('max-width', '20em')\n            .style('pointer-events', 'none').style('background', 'lightsteelblue').style('padding', '3px');\n            var dx = this.props.tooltipX;\n            var dy = this.props.tooltipY;\n            this.svg.selectAll('path.sunburst-main-arc').on(\"mouseover\", function (d) {\n              if (this.props.tooltip) {\n                this.tooltipDom.html(this.props.tooltipFunc(d.data)).style(\"left\", _d3Selection.event.pageX + dx + \"px\").style(\"top\", _d3Selection.event.pageY + dy + \"px\");\n                this.tooltipDom.transition().style(\"opacity\", .9).duration(200);\n                this.props.onMouseover && this.props.onMouseover(d.data);\n              }\n            }.bind(this)).on(\"mouseout\", function (d) {\n              this.props.tooltip && this.tooltipDom.transition().style(\"opacity\", 0).duration(500);\n              this.props.onMouseout && this.props.onMouseout(d.data);\n            }.bind(this));\n          }\n        }, {\n          key: '_colorize',\n          value: function _colorize(d) {\n            this.props._debug && this.props._log(\"Sunburst: _colorize(d)\");\n            var hue = void 0;\n            var current = d;\n\n            if (current.depth === 0) {\n              return '#33cccc';\n            }\n\n            var _props = this.props,\n                lightness = _props.lightness,\n                saturation = _props.saturation,\n                child_brightness = _props.child_brightness;\n\n            if (current.depth <= 1) {\n              hue = this.hueDXScale(d.x0);\n              current.fill = (0, _d3Color.hsl)(hue, saturation, lightness);\n              return current.fill;\n            }\n\n            current.fill = current.parent.fill.brighter(child_brightness);\n            var thishsl = (0, _d3Color.hsl)(current.fill);\n            hue = this.hueDXScale(current.x0);\n            var colorshift = thishsl.h + hue / 4;\n            var c = (0, _d3Color.hsl)(colorshift, thishsl.s, thishsl.l);\n            return this.props.colorFunc || this.props.colorFunc(d, c) || c;\n          } // we have to render first then componentMounted will give us\n          // access to the dom\n\n        }, {\n          key: 'render',\n          value: function render() {\n            this.props._debug && this.props._log(\"Sunburst: render()\");\n            return _react2.default.createElement('div', {\n              className: 'sunburst-wrapper',\n              id: this.domId\n            });\n          }\n        }]);\n\n        return Sunburst;\n      }(_react2.default.Component);\n\n      Sunburst.propTypes = {\n        data: _propTypes2.default.object.isRequired,\n        width: _propTypes2.default.string.isRequired,\n        height: _propTypes2.default.string.isRequired,\n        count_member: _propTypes2.default.string.isRequired,\n        // requried /w/ default\n        tooltip: _propTypes2.default.bool.isRequired,\n        // FIXME get rid of this\n        radianCutoff: _propTypes2.default.number.isRequired,\n        // smallest slice to show in radians\n        transitionDuration: _propTypes2.default.number.isRequired,\n        // ms for animation\n        saturation: _propTypes2.default.number.isRequired,\n        // base saturation of arcs\n        lightness: _propTypes2.default.number.isRequired,\n        // base lightness of parent arcs\n        child_brightness: _propTypes2.default.number.isRequired,\n        // value to lighten children\n        font_size: _propTypes2.default.number.isRequired,\n        // for calculating if text fits\n        colorFunc: _propTypes2.default.func,\n        // custom colorizing for slice\n        tooltipFunc: _propTypes2.default.func,\n        tooltipX: _propTypes2.default.number.isRequired,\n        // offset x to place tooltip\n        tooltipY: _propTypes2.default.number.isRequired,\n        // ofset y to place tooltip\n        domId: _propTypes2.default.string,\n        // will be random if undefined\n        onMouseover: _propTypes2.default.func,\n        onMouseout: _propTypes2.default.func,\n        onClick: _propTypes2.default.func,\n        labelFunc: _propTypes2.default.func,\n        // returns text for slice\n        condensedLabelFunc: _propTypes2.default.func,\n        // backup function to try to fit text\n        key_member: _propTypes2.default.string,\n        // unique id\n        _debug: _propTypes2.default.bool,\n        _log: _propTypes2.default.func,\n        _warn: _propTypes2.default.func\n      };\n      Sunburst.defaultProps = {\n        tooltip: true,\n        tooltipFunc: function tooltipFunc(data) {\n          return data.name;\n        },\n        radianCutoff: .001,\n        transitionDuration: 500,\n        colorFunc: function colorFunc(node, current_color) {\n          return current_color;\n        },\n        key_member: 'key',\n        font_size: 12,\n        tooltipX: 20,\n        tooltipY: 20,\n        saturation: .5,\n        lightness: .5,\n        child_brightness: .5,\n        _debug: false,\n        _log: console.log,\n        _warn: console.warn\n      };\n      exports.default = Sunburst;\n    }, {\n      \"d3-color\": \"d3-color\",\n      \"d3-hierarchy\": \"d3-hierarchy\",\n      \"d3-interpolate\": \"d3-interpolate\",\n      \"d3-path\": \"d3-path\",\n      \"d3-scale\": \"d3-scale\",\n      \"d3-selection\": \"d3-selection\",\n      \"d3-shape\": \"d3-shape\",\n      \"d3-transition\": \"d3-transition\",\n      \"prop-types\": \"prop-types\",\n      \"react\": \"react\",\n      \"shallowequal\": \"shallowequal\"\n    }]\n  }, {}, [1])(1);\n});","map":null,"metadata":{},"sourceType":"script"}